"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8703],{7878:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>n,metadata:()=>l,toc:()=>o});var t=s(4848),d=s(8453);const n={sidebar_position:5},r="Plutus Tx compiler options",l={id:"delve-deeper/plutus-tx-compiler-options",title:"Plutus Tx compiler options",description:"\x3c!---",source:"@site/docs/delve-deeper/plutus-tx-compiler-options.md",sourceDirName:"delve-deeper",slug:"/delve-deeper/plutus-tx-compiler-options",permalink:"/docs/delve-deeper/plutus-tx-compiler-options",draft:!1,unlisted:!1,editUrl:"https://github.com/IntersectMBO/plutus/edit/master/doc/docusaurus/docs/delve-deeper/plutus-tx-compiler-options.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Haddock Documentation",permalink:"/docs/delve-deeper/haddock-documentation"},next:{title:"Optimizing Scripts with asData",permalink:"/docs/delve-deeper/optimizing-scripts-with-asData"}},c={},o=[];function h(e){const i={code:"code",h1:"h1",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"plutus-tx-compiler-options",children:"Plutus Tx compiler options"}),"\n",(0,t.jsxs)(i.p,{children:["These options can be passed to the compiler via the ",(0,t.jsx)(i.code,{children:"OPTIONS_GHC"})," pragma, for instance"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-haskell",children:"{-# OPTIONS_GHC -fplugin-opt PlutusTx.Plugin:dump-uplc #-}\n{-# OPTIONS_GHC -fplugin-opt PlutusTx.Plugin:max-simplifier-iterations-uplc=3 #-}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["For each boolean option, you can add a ",(0,t.jsx)(i.code,{children:"no-"})," prefix to switch it off, such as ",(0,t.jsx)(i.code,{children:"no-typecheck"}),", ",(0,t.jsx)(i.code,{children:"no-simplifier-beta"}),"."]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Option"}),(0,t.jsx)(i.th,{children:"Value Type"}),(0,t.jsx)(i.th,{children:"Default"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"conservative-optimisation"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsxs)(i.td,{children:["When conservative optimisation is used, only the optimisations that never make the program worse (in terms of cost or size) are employed. Implies ",(0,t.jsx)(i.code,{children:"no-relaxed-float-in"}),", ",(0,t.jsx)(i.code,{children:"no-inline-constants"}),", ",(0,t.jsx)(i.code,{children:"no-simplifier-evaluate-builtins"}),", and ",(0,t.jsx)(i.code,{children:"preserve-logging"}),"."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"context-level"})}),(0,t.jsx)(i.td,{children:"Int"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"Set context level for error messages."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"coverage-all"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"Add all available coverage annotations in the trace output"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"coverage-boolean"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"Add boolean coverage annotations in the trace output"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"coverage-location"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"Add location coverage annotations in the trace output"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"defer-errors"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"If a compilation error happens and this option is turned on, the compilation error is suppressed and the original Haskell expression is replaced with a runtime-error expression."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"dump-compilation-trace"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"Dump compilation trace for debugging"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"dump-pir"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"Dump Plutus IR"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"dump-tplc"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"Dump Typed Plutus Core"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"dump-uplc"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"Dump Untyped Plutus Core"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"inline-constants"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsxs)(i.td,{children:["Always inline constants. Inlining constants always reduces script costs slightly, but may increase script sizes if a large constant is used more than once. Implied by ",(0,t.jsx)(i.code,{children:"no-conservative-optimisation"}),"."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"max-cse-iterations"})}),(0,t.jsx)(i.td,{children:"Int"}),(0,t.jsx)(i.td,{children:"4"}),(0,t.jsx)(i.td,{children:"Set the max iterations for CSE"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"max-simplifier-iterations-pir"})}),(0,t.jsx)(i.td,{children:"Int"}),(0,t.jsx)(i.td,{children:"12"}),(0,t.jsx)(i.td,{children:"Set the max iterations for the PIR simplifier"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"max-simplifier-iterations-uplc"})}),(0,t.jsx)(i.td,{children:"Int"}),(0,t.jsx)(i.td,{children:"12"}),(0,t.jsx)(i.td,{children:"Set the max iterations for the UPLC simplifier"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"optimize"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsx)(i.td,{children:"Run optimization passes such as simplification and floating let-bindings."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"pedantic"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsx)(i.td,{children:"Run type checker after each compilation pass"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"preserve-logging"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsxs)(i.td,{children:["Turn off optimisations that may alter (i.e., add, remove or change the order of) trace messages. Implied by ",(0,t.jsx)(i.code,{children:"conservative-optimisation"}),"."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"profile-all"})}),(0,t.jsx)(i.td,{children:"ProfileOpts"}),(0,t.jsx)(i.td,{children:"None"}),(0,t.jsx)(i.td,{children:"Set profiling options to All, which adds tracing when entering and exiting a term."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"relaxed-float-in"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsxs)(i.td,{children:["Use a more aggressive float-in pass, which often leads to reduced costs but may occasionally lead to slightly increased costs. Implied by ",(0,t.jsx)(i.code,{children:"no-conservative-optimisation"}),"."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"remove-trace"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"False"}),(0,t.jsxs)(i.td,{children:["Eliminate calls to ",(0,t.jsx)(i.code,{children:"trace"})," from Plutus Core"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"simplifier-beta"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsx)(i.td,{children:"Run a simplification pass that performs beta transformations"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"simplifier-evaluate-builtins"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsxs)(i.td,{children:["Run a simplification pass that evaluates fully saturated builtin applications. Implied by ",(0,t.jsx)(i.code,{children:"no-conservative-optimisation"}),"."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"simplifier-inline"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsx)(i.td,{children:"Run a simplification pass that performs inlining"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"simplifier-remove-dead-bindings"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsx)(i.td,{children:"Run a simplification pass that removes dead bindings"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"simplifier-unwrap-cancel"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsx)(i.td,{children:"Run a simplification pass that cancels unwrap/wrap pairs"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"strictify-bindings"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsx)(i.td,{children:"Run a simplification pass that makes bindings stricter"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"target-version"})}),(0,t.jsx)(i.td,{children:"Version"}),(0,t.jsx)(i.td,{children:"1.1.0"}),(0,t.jsx)(i.td,{children:"The target Plutus Core language version"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"typecheck"})}),(0,t.jsx)(i.td,{children:"Bool"}),(0,t.jsx)(i.td,{children:"True"}),(0,t.jsx)(i.td,{children:"Perform type checking during compilation."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"verbosity"})}),(0,t.jsx)(i.td,{children:"Verbosity"}),(0,t.jsx)(i.td,{children:"Quiet"}),(0,t.jsx)(i.td,{children:"Set logging verbosity level (0=Quiet, 1=Verbose, 2=Debug)"})]})]})]})]})}function a(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,i,s)=>{s.d(i,{R:()=>r,x:()=>l});var t=s(6540);const d={},n=t.createContext(d);function r(e){const i=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),t.createElement(n.Provider,{value:i},e.children)}}}]);