"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4180],{2645:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var i=t(4848),o=t(8453);const c={sidebar_position:15},r="Minting the Token to be Auctioned",s={id:"auction-smart-contract/end-to-end/mint",title:"Minting the Token to be Auctioned",description:"Before we can start the auction, we need to mint a token to be auctioned.",source:"@site/docs/auction-smart-contract/end-to-end/mint.md",sourceDirName:"auction-smart-contract/end-to-end",slug:"/auction-smart-contract/end-to-end/mint",permalink:"/docs/auction-smart-contract/end-to-end/mint",draft:!1,unlisted:!1,editUrl:"https://github.com/IntersectMBO/plutus/edit/master/doc/docusaurus/docs/auction-smart-contract/end-to-end/mint.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Getting Funds from the Faucet",permalink:"/docs/auction-smart-contract/end-to-end/getting-funds"},next:{title:"Placing Bids",permalink:"/docs/auction-smart-contract/end-to-end/placing-bids"}},a={},l=[{value:"On-chain Minting Policy Script",id:"on-chain-minting-policy-script",level:2},{value:"Compile and Generate Blueprint for the Minting Policy",id:"compile-and-generate-blueprint-for-the-minting-policy",level:2},{value:"Compile and Generate Blueprint for the Auction Validator",id:"compile-and-generate-blueprint-for-the-auction-validator",level:2},{value:"Off-chain Code for Minting",id:"off-chain-code-for-minting",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{LiteralInclude:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("LiteralInclude",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"minting-the-token-to-be-auctioned",children:"Minting the Token to be Auctioned"}),"\n",(0,i.jsxs)(n.p,{children:["Before we can start the auction, we need to mint a token to be auctioned.\nTo do so, we first must determine the token's currency symbol and name.\nTo mint or burn tokens with a specific currency symbol (",(0,i.jsx)(n.code,{children:"currencySymbol"}),"), a Plutus script whose hash matches ",(0,i.jsx)(n.code,{children:"currencySymbol"})," must be provided, and is used to validate the minting or burning action.\nTherefore, we'll first write the on-chain script, then compute its hash and use it as the currency symbol."]}),"\n",(0,i.jsx)(n.h2,{id:"on-chain-minting-policy-script",children:"On-chain Minting Policy Script"}),"\n",(0,i.jsxs)(n.p,{children:["The full minting policy code can be found at ",(0,i.jsx)(n.a,{href:"https://github.com/IntersectMBO/plutus-tx-template/blob/main/src/AuctionMintingPolicy.hs",children:"AuctionMintingPolicy.hs"}),".\nThe main logic is in the following function:"]}),"\n",(0,i.jsx)(t,{file:"AuctionMintingPolicy.hs",language:"haskell",title:"AuctionMintingPolicy.hs",start:"-- BLOCK1",end:"-- BLOCK2"}),"\n",(0,i.jsx)(n.p,{children:"This script will pass if the following two conditions are met:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The transaction is signed by a specific public key."}),"\n",(0,i.jsxs)(n.li,{children:["The transaction mints exactly one token, whose currency symbol matches the script's hash (i.e., ",(0,i.jsx)(n.code,{children:"ownCurrencySymbol ctx"}),").\nThe token name can be anything."]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udccc"," ",(0,i.jsx)(n.strong,{children:"NOTE"})]}),"\n",(0,i.jsxs)(n.p,{children:["A token minted in this way is ",(0,i.jsx)(n.em,{children:"not"})," considered a non-fungible token (NFT) because, while only one token can be minted in a single transaction, multiple transactions can mint additional tokens with the same currency symbol and token name.\nTo create a truly unique token, you would need a more complex minting policy, but for simplicity, that is not covered here."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"compile-and-generate-blueprint-for-the-minting-policy",children:"Compile and Generate Blueprint for the Minting Policy"}),"\n",(0,i.jsxs)(n.p,{children:["Next, we need to compile the minting policy script and create its blueprint.\nTo do so, we first need to supply a public key hash, which the minting policy will use for checking condition 1 above.\nAssuming the seller is the one minting the token, this should be the seller's public key hash.\nOpen ",(0,i.jsx)(n.code,{children:"GenMintingPolicyBlueprint.hs"})," in the ",(0,i.jsx)(n.code,{children:"on-chain"})," directory, and replace ",(0,i.jsx)(n.code,{children:'error "Replace with seller pkh"'})," with the content of ",(0,i.jsx)(n.code,{children:"off-chain/seller.pkh"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The minting policy code comes with ",(0,i.jsx)(n.code,{children:"plutus-tx-template"}),", so you can find it in the ",(0,i.jsx)(n.code,{children:"on-chain"})," repository.\nTo compile it and generate the blueprint, navigate to the ",(0,i.jsx)(n.code,{children:"on-chain"})," directory and run"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cabal run gen-minting-policy-blueprint -- ../off-chain/plutus-auction-minting-policy.json\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You may need to run ",(0,i.jsx)(n.code,{children:"cabal update"})," before executing this command for the first time."]}),"\n",(0,i.jsxs)(n.p,{children:["This should produce a blueprint file named ",(0,i.jsx)(n.code,{children:"off-chain/plutus-auction-minting-policy.json"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"compile-and-generate-blueprint-for-the-auction-validator",children:"Compile and Generate Blueprint for the Auction Validator"}),"\n",(0,i.jsxs)(n.p,{children:["One final step before minting the token: since we want to lock the minted token at the script address corresponding to the auction validator,\nwe must supply the parameters (i.e., ",(0,i.jsx)(n.code,{children:"AuctionParams"}),") to the auction validator, compile the auction validator, and calculate its script address."]}),"\n",(0,i.jsxs)(n.p,{children:["Open ",(0,i.jsx)(n.code,{children:"GenAuctionValidatorBlueprint.hs"})," in the ",(0,i.jsx)(n.code,{children:"on-chain"})," directory, and replace all placeholders:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Replace ",(0,i.jsx)(n.code,{children:'error "Replace with seller pkh"'})," with the content of ",(0,i.jsx)(n.code,{children:"off-chain/seller.pkh"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Replace ",(0,i.jsx)(n.code,{children:'error "Replace with currency symbol"'})," with the minting policy hash, which you can find in the ",(0,i.jsx)(n.code,{children:"hash"})," field in ",(0,i.jsx)(n.code,{children:"off-chain/plutus-auction-minting-policy.json"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Replace ",(0,i.jsx)(n.code,{children:'error "Replace with the auction\'s end time"'})," with a POSIX timestamp for a time in the near future (say 24 hours from now).\nNote that the POSIX timestamp in Plutus is the number of ",(0,i.jsx)(n.em,{children:"milliseconds"}),", rather than seconds, elapsed since January 1, 1970.\nIn other words, add three zeros to the usual POSIX timestamp.\nFor instance, the POSIX timestamp of September 1, 2024, 21:44:51 UTC, is 1725227091000."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Then, navigate to the ",(0,i.jsx)(n.code,{children:"on-chain"})," directory and run"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cabal run gen-auction-validator-blueprint -- ../off-chain/plutus-auction-validator.json\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will generate a blueprint file named ",(0,i.jsx)(n.code,{children:"off-chain/plutus-auction-validator.json"}),", which the off-chain code can read and calculate the auction validator's script address."]}),"\n",(0,i.jsx)(n.h2,{id:"off-chain-code-for-minting",children:"Off-chain Code for Minting"}),"\n",(0,i.jsxs)(n.p,{children:["We are now ready to write and execute the off-chain code for minting.\nCreate a file named ",(0,i.jsx)(n.code,{children:"off-chain/mint-token-for-auction.mjs"})," with the following content:"]}),"\n",(0,i.jsx)(t,{file:"mint-token-for-auction.mjs",language:"javascript",title:"mint-token-for-auction.mjs"}),"\n",(0,i.jsxs)(n.p,{children:["Substitute your Blockfrost project ID for ",(0,i.jsx)(n.code,{children:"Replace with Blockfrost Project ID"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This Javascript module uses the mesh library to build a transaction that mints a token (",(0,i.jsx)(n.code,{children:"tx.mintAsset"}),").\nThe token will have the currency symbol of the minting policy's hash, and a token name of ",(0,i.jsx)(n.code,{children:"TokenToBeAuctioned"}),".\nIt will be sent to ",(0,i.jsx)(n.code,{children:"auctionValidatorAddress"}),", with a datum corresponding to ",(0,i.jsx)(n.code,{children:"Nothing"}),".\nThe transaction is signed by the seller (",(0,i.jsx)(n.code,{children:"seller.skey"}),"), and then submitted to the Preview testnet."]}),"\n",(0,i.jsx)(n.p,{children:"Run the coding using:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"node mint-token-for-auction.mjs\n"})}),"\n",(0,i.jsxs)(n.p,{children:['and you should see a message "Minted a token at address ..." printed in the console.\nWithin a minute, you should be able to find the transaction using the transaction hash on ',(0,i.jsx)(n.a,{href:"https://preview.cardanoscan.io/",children:"Cardanoscan"})," and review its details."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},c=i.createContext(o);function r(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);