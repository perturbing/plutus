"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3659],{4323:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Plutus user guide","href":"/docs/","docId":"index","unlisted":false},{"type":"category","label":"Example: An Auction Smart Contract","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"On-chain Code: The Auction Validator","href":"/docs/auction-smart-contract/on-chain-code","docId":"auction-smart-contract/on-chain-code","unlisted":false},{"type":"category","label":"End to end","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Generating Keys and Addresses","href":"/docs/auction-smart-contract/end-to-end/generating-keys","docId":"auction-smart-contract/end-to-end/generating-keys","unlisted":false},{"type":"link","label":"Getting Funds from the Faucet","href":"/docs/auction-smart-contract/end-to-end/getting-funds","docId":"auction-smart-contract/end-to-end/getting-funds","unlisted":false},{"type":"link","label":"Minting the Token to be Auctioned","href":"/docs/auction-smart-contract/end-to-end/mint","docId":"auction-smart-contract/end-to-end/mint","unlisted":false},{"type":"link","label":"Placing Bids","href":"/docs/auction-smart-contract/end-to-end/placing-bids","docId":"auction-smart-contract/end-to-end/placing-bids","unlisted":false},{"type":"link","label":"Closing the Auction","href":"/docs/auction-smart-contract/end-to-end/closing-the-auction","docId":"auction-smart-contract/end-to-end/closing-the-auction","unlisted":false}],"href":"/docs/category/end-to-end"},{"type":"link","label":"Life cycle of the auction smart contract","href":"/docs/auction-smart-contract/life-cycle","docId":"auction-smart-contract/life-cycle","unlisted":false}],"href":"/docs/category/example-an-auction-smart-contract"},{"type":"category","label":"Essential concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Plutus Core and Plutus Tx","href":"/docs/essential-concepts/plutus-core-and-plutus-tx","docId":"essential-concepts/plutus-core-and-plutus-tx","unlisted":false},{"type":"link","label":"Different Notions of Version","href":"/docs/essential-concepts/versions","docId":"essential-concepts/versions","unlisted":false},{"type":"link","label":"Ledgers","href":"/docs/essential-concepts/ledger","docId":"essential-concepts/ledger","unlisted":false}],"href":"/docs/category/essential-concepts"},{"type":"link","label":"Glossary","href":"/docs/glossary","docId":"glossary","unlisted":false},{"type":"category","label":"Using Plutus Tx","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Environment Setup","href":"/docs/using-plutus-tx/environment-setup","docId":"using-plutus-tx/environment-setup","unlisted":false},{"type":"link","label":"Compiling Plutus Tx","href":"/docs/using-plutus-tx/compiling-plutus-tx","docId":"using-plutus-tx/compiling-plutus-tx","unlisted":false},{"type":"link","label":"Differences From Haskell","href":"/docs/using-plutus-tx/differences-from-haskell","docId":"using-plutus-tx/differences-from-haskell","unlisted":false},{"type":"link","label":"GHC Extensions, Flags and Pragmas","href":"/docs/using-plutus-tx/extensions-flags-pragmas","docId":"using-plutus-tx/extensions-flags-pragmas","unlisted":false},{"type":"link","label":"Special Functions and Types","href":"/docs/using-plutus-tx/special-functions-and-types","docId":"using-plutus-tx/special-functions-and-types","unlisted":false},{"type":"link","label":"Inspecting Compilation and Compiled Code","href":"/docs/using-plutus-tx/inspecting","docId":"using-plutus-tx/inspecting","unlisted":false}],"href":"/docs/category/using-plutus-tx"},{"type":"category","label":"Working with scripts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Plutus Ledger Language Version (Plutus V1/V2/V3)","href":"/docs/working-with-scripts/ledger-language-version","docId":"working-with-scripts/ledger-language-version","unlisted":false},{"type":"link","label":"Script Purposes","href":"/docs/working-with-scripts/script-purposes","docId":"working-with-scripts/script-purposes","unlisted":false},{"type":"link","label":"Producing a Plutus contract blueprint","href":"/docs/working-with-scripts/producing-a-blueprint","docId":"working-with-scripts/producing-a-blueprint","unlisted":false},{"type":"link","label":"Profiling the budget usage of Plutus scripts","href":"/docs/working-with-scripts/profiling-budget-usage","docId":"working-with-scripts/profiling-budget-usage","unlisted":false}],"href":"/docs/category/working-with-scripts"},{"type":"category","label":"Delve Deeper","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview of Languages Compiling to UPLC","href":"/docs/delve-deeper/languages","docId":"delve-deeper/languages","unlisted":false},{"type":"link","label":"Haddock Documentation","href":"/docs/delve-deeper/haddock-documentation","docId":"delve-deeper/haddock-documentation","unlisted":false},{"type":"link","label":"Plutus Tx compiler options","href":"/docs/delve-deeper/plutus-tx-compiler-options","docId":"delve-deeper/plutus-tx-compiler-options","unlisted":false},{"type":"link","label":"Optimizing Scripts with asData","href":"/docs/delve-deeper/optimizing-scripts-with-asData","docId":"delve-deeper/optimizing-scripts-with-asData","unlisted":false},{"type":"link","label":"Other Optimization Techniques","href":"/docs/delve-deeper/other-optimization-techniques","docId":"delve-deeper/other-optimization-techniques","unlisted":false},{"type":"link","label":"Understanding Script Hashes","href":"/docs/delve-deeper/understanding-script-hashes","docId":"delve-deeper/understanding-script-hashes","unlisted":false},{"type":"link","label":"Cost model parameters","href":"/docs/delve-deeper/cost-model-parameters","docId":"delve-deeper/cost-model-parameters","unlisted":false},{"type":"link","label":"Further resources","href":"/docs/delve-deeper/further-resources","docId":"delve-deeper/further-resources","unlisted":false}],"href":"/docs/category/delve-deeper"},{"type":"link","label":"Troubleshooting","href":"/docs/troubleshooting","docId":"troubleshooting","unlisted":false}]},"docs":{"auction-smart-contract/end-to-end/closing-the-auction":{"id":"auction-smart-contract/end-to-end/closing-the-auction","title":"Closing the Auction","description":"Once the auction\'s end time has elapsed, a transaction can be submitted to finalize the auction, distributing the token and the highest bid accordingly.","sidebar":"tutorialSidebar"},"auction-smart-contract/end-to-end/generating-keys":{"id":"auction-smart-contract/end-to-end/generating-keys","title":"Generating Keys and Addresses","description":"To start, clone the plutus-tx-template repository into the on-chain directory.","sidebar":"tutorialSidebar"},"auction-smart-contract/end-to-end/getting-funds":{"id":"auction-smart-contract/end-to-end/getting-funds","title":"Getting Funds from the Faucet","description":"Next, we\'ll need to fund the wallet of each participant (seller, bidder1 and bidder2), in order to cover transaction fees and place bids.","sidebar":"tutorialSidebar"},"auction-smart-contract/end-to-end/mint":{"id":"auction-smart-contract/end-to-end/mint","title":"Minting the Token to be Auctioned","description":"Before we can start the auction, we need to mint a token to be auctioned.","sidebar":"tutorialSidebar"},"auction-smart-contract/end-to-end/placing-bids":{"id":"auction-smart-contract/end-to-end/placing-bids","title":"Placing Bids","description":"Now we can start bidding.","sidebar":"tutorialSidebar"},"auction-smart-contract/life-cycle":{"id":"auction-smart-contract/life-cycle","title":"Life cycle of the auction smart contract","description":"With the Plutus script written, Alice is now ready to start the auction smart contract.","sidebar":"tutorialSidebar"},"auction-smart-contract/on-chain-code":{"id":"auction-smart-contract/on-chain-code","title":"On-chain Code: The Auction Validator","description":"The code in this example is not a production-ready implementation, as it is not optimized for security or efficiency.","sidebar":"tutorialSidebar"},"delve-deeper/cost-model-parameters":{"id":"delve-deeper/cost-model-parameters","title":"Cost model parameters","description":"The cost model for Plutus Core scripts has a number of parameters.","sidebar":"tutorialSidebar"},"delve-deeper/further-resources":{"id":"delve-deeper/further-resources","title":"Further resources","description":"1. Manuel M. T. Chakravarty, James Chapman, Kenneth MacKenzie, Orestis Melkonian, Jann M\xfcller, Michael Peyton Jones, Polina Vinogradova, Philip Wadler, and Joachim Zahnentferner. UTXO$_\\\\mathrm ma$//github.com/IntersectMBO/plutus.","sidebar":"tutorialSidebar"},"delve-deeper/haddock-documentation":{"id":"delve-deeper/haddock-documentation","title":"Haddock Documentation","description":"Haddock is a tool for automatically generating documentation from annotated Haskell source code.","sidebar":"tutorialSidebar"},"delve-deeper/languages":{"id":"delve-deeper/languages","title":"Overview of Languages Compiling to UPLC","description":"Untyped Plutus Core (UPLC) is the assembly-like language that runs in Cardano nodes for transaction validation.","sidebar":"tutorialSidebar"},"delve-deeper/optimizing-scripts-with-asData":{"id":"delve-deeper/optimizing-scripts-with-asData","title":"Optimizing Scripts with asData","description":"The Plutus libraries contain a PlutusTx.asData module that contains Template Haskell (TH) code for encoding algebraic data types (ADTs) as Data objects in Plutus Core, as opposed to sums-of-products terms.","sidebar":"tutorialSidebar"},"delve-deeper/other-optimization-techniques":{"id":"delve-deeper/other-optimization-techniques","title":"Other Optimization Techniques","description":"Identifying problem areas","sidebar":"tutorialSidebar"},"delve-deeper/plutus-tx-compiler-options":{"id":"delve-deeper/plutus-tx-compiler-options","title":"Plutus Tx compiler options","description":"\x3c!---","sidebar":"tutorialSidebar"},"delve-deeper/understanding-script-hashes":{"id":"delve-deeper/understanding-script-hashes","title":"Understanding Script Hashes","description":"Script hashes are a core concept and play a vital role on Cardano.","sidebar":"tutorialSidebar"},"essential-concepts/ledger":{"id":"essential-concepts/ledger","title":"Ledgers","description":"The Plutus Platform is designed to work with distributed ledgers, which we\'ll just call \\"ledgers\\" from now on.","sidebar":"tutorialSidebar"},"essential-concepts/plutus-core-and-plutus-tx":{"id":"essential-concepts/plutus-core-and-plutus-tx","title":"Plutus Core and Plutus Tx","description":"Understanding the roles and relationships between different languages is key to the effective and efficient development of smart contracts.","sidebar":"tutorialSidebar"},"essential-concepts/versions":{"id":"essential-concepts/versions","title":"Different Notions of Version","description":"There are several different notions of version that Cardano smart contract developers must distinguish.","sidebar":"tutorialSidebar"},"glossary":{"id":"glossary","title":"Glossary","description":"Address","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Plutus user guide","description":"Introduction","sidebar":"tutorialSidebar"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"Compilation Errors","sidebar":"tutorialSidebar"},"using-plutus-tx/compiling-plutus-tx":{"id":"using-plutus-tx/compiling-plutus-tx","title":"Compiling Plutus Tx","description":"The Plutus Tx compiler is a GHC plugin, provided by the plutus-tx-plugin package.","sidebar":"tutorialSidebar"},"using-plutus-tx/differences-from-haskell":{"id":"using-plutus-tx/differences-from-haskell","title":"Differences From Haskell","description":"Strictness","sidebar":"tutorialSidebar"},"using-plutus-tx/environment-setup":{"id":"using-plutus-tx/environment-setup","title":"Environment Setup","description":"Plutus Tx is a subset of Haskell, so configuring the development environment for Plutus Tx is similar to a regular Haskell environment setup.","sidebar":"tutorialSidebar"},"using-plutus-tx/extensions-flags-pragmas":{"id":"using-plutus-tx/extensions-flags-pragmas","title":"GHC Extensions, Flags and Pragmas","description":"Plutus Tx is a subset of Haskell and is compiled to Untyped Plutus Core by the Plutus Tx compiler, a GHC (Glasgow Haskell Compiler) plugin.","sidebar":"tutorialSidebar"},"using-plutus-tx/inspecting":{"id":"using-plutus-tx/inspecting","title":"Inspecting Compilation and Compiled Code","description":"On this page, you\u2019ll learn how to look into the compilation of Plutus Tx and the resulting compiled code, which you might want to do for reasons such as debugging and tuning.","sidebar":"tutorialSidebar"},"using-plutus-tx/special-functions-and-types":{"id":"using-plutus-tx/special-functions-and-types","title":"Special Functions and Types","description":"Normally, the Plutus Tx compiler compiles a Haskell identifier by obtaining and compiling its definition (also known as unfolding), and creating a term binding in PIR, an intermediate representation used by the Plutus Tx compiler.","sidebar":"tutorialSidebar"},"working-with-scripts/ledger-language-version":{"id":"working-with-scripts/ledger-language-version","title":"Plutus Ledger Language Version (Plutus V1/V2/V3)","description":"As explained in Different Notions of Version, Plutus V1, V2 and V3 are not distinct programming languages; the primary difference lies in the arguments the script receives from the ledger, and the value it returns.","sidebar":"tutorialSidebar"},"working-with-scripts/producing-a-blueprint":{"id":"working-with-scripts/producing-a-blueprint","title":"Producing a Plutus contract blueprint","description":"Plutus contract blueprints (CIP-0057) are used to document the binary interface of a Plutus contract in a machine-readable format (JSON schema).","sidebar":"tutorialSidebar"},"working-with-scripts/profiling-budget-usage":{"id":"working-with-scripts/profiling-budget-usage","title":"Profiling the budget usage of Plutus scripts","description":"Figuring out why your script takes more CPU or memory units than you expect can be tricky.","sidebar":"tutorialSidebar"},"working-with-scripts/script-purposes":{"id":"working-with-scripts/script-purposes","title":"Script Purposes","description":"One of the arguments every Plutus script receives is the script context, containing information about the transaction the script is validating.","sidebar":"tutorialSidebar"}}}}')}}]);